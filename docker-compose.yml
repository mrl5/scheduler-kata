version: '3.7'

services:
  db:
    build:
      context: ./docker
      dockerfile: db.Dockerfile
    restart: unless-stopped
    volumes:
      - db_data:/var/lib/postgresql/data
    command: postgres -c shared_preload_libraries=pg_cron,pg_stat_statements -c session_preload_libraries=auto_explain
    ports:
      - 5432:5432
    environment:
      POSTGRES_PASSWORD: ${ADMIN_DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

#  app-monolith:
#    build:
#      context: .
#      dockerfile: ./docker/app-monolith.Dockerfile
#    privileged: false
#    restart: unless-stopped
#    ports:
#      - 8000:8000
#    environment:
#      - DATABASE_URL=${DATABASE_URL}
#      - ENABLE_SCHEDULER=${ENABLE_SCHEDULER}
#      - ENABLE_WORKERS=${ENABLE_WORKERS}
#      - WORKERS_PER_INSTANCE=${WORKERS_PER_INSTANCE}
#    depends_on:
#      db:
#        condition: service_healthy

  app-rest-api:
    build:
      context: .
      dockerfile: ./docker/app-rest-api.Dockerfile
    privileged: false
    restart: unless-stopped
    ports:
      - 8000:8000
    environment:
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      db:
        condition: service_healthy
  scheduler:
    build:
      context: .
      dockerfile: ./docker/scheduler.Dockerfile
    privileged: false
    restart: unless-stopped
    environment:
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      db:
        condition: service_healthy
  worker:
    build:
      context: .
      dockerfile: ./docker/worker.Dockerfile
    privileged: false
    restart: unless-stopped
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - WORKERS_PER_INSTANCE=${WORKERS_PER_INSTANCE}
    depends_on:
      db:
        condition: service_healthy

volumes:
  db_data: null
